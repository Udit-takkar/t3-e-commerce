// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    image         String?
    password      String
    phone         String?
    birthDate     DateTime?
    aboutMe       String?   @db.Text
    createdAt     DateTime? @default(now())
    updatedAt     DateTime? @updatedAt
    roleId        Int?
    role          Role?     @relation(fields: [roleId], references: [id])
    cart          Cart[]
    emailVerified DateTime?

    accounts     Account[]
    sessions     Session[]
    Permission   Permission? @relation(fields: [permissionId], references: [id])
    permissionId Int?

    @@map("user")
}

model Role {
    id          Int          @id @default(autoincrement())
    name        String       @unique
    displayName String?
    createdAt   DateTime?    @default(now())
    updatedAt   DateTime?    @updatedAt
    users       User[]
    permissions Permission[]

    @@map("role")
}

model Permission {
    id          Int       @id @default(autoincrement())
    name        String
    displayName String
    createdAt   DateTime? @default(now())
    updatedAt   DateTime? @updatedAt
    roles       Role[]
    users       User[]

    @@map("permission")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id       String    @id @default(cuid())
    name     String
    products Product[]
    image    String?

    @@map("category")
}

model Product {
    id               String     @id @default(cuid())
    name             String
    description      String
    price            Float
    sale_price       String
    image            String
    brand            String
    categories       Category[]
    currentInventory Int
    createdAt        DateTime?  @default(now())
    CartItem         CartItem[]

    @@map("product")
}

model Cart {
    id        String    @id @default(cuid())
    userId    String
    createdAt DateTime? @default(now())

    user     User       @relation(fields: [userId], references: [id])
    CartItem CartItem[]

    @@index([userId], map: "Cart_userId_fkey")
    @@map("cart")
}

model CartItem {
    cart_id    String    @id
    product_id String
    quantity   Int
    createdAt  DateTime? @default(now())

    cart    Cart    @relation(fields: [cart_id], references: [id])
    product Product @relation(fields: [product_id], references: [id])

    @@map("cartItem")
}
